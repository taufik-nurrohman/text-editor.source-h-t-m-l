extends _index.pug

block state
  - const title = 'Text Editor Source HTML ' + version
  - const scripts = ['../key/index.min.js', '../text-editor/index.min.js', '../text-editor.history/index.min.js', '../text-editor.source/index.min.js', '../text-editor.source-x-m-l/index.min.js', 'index.min.js']

block script
  script
    | Object.assign(TE.prototype, TE.History.that, TE.Source.that);
    |
    | TE.prototype.toggleXML = TE.SourceXML.that.toggle;
    |
    | let editor = new TE(document.querySelector('textarea'), '  '),
    |     log = document.querySelector('#log'),
    |     map = new K(editor),
    |     {canKeyDown: canKeyDownSource, canKeyDownDent: canKeyDownDentSource, canKeyDownEnter: canKeyDownEnterSource, canKeyDownHistory: canKeyDownHistorySource, canKeyDownMove: canKeyDownMoveSource, canKeyUp: canKeyUpSource} = TE.Source,
    |     {canKeyDown: canKeyDownSourceXML, canMouseDown: canMouseDownSourceXML} = TE.SourceXML,
    |     {canKeyDown: canKeyDownSourceHTML, commands: commandsSourceHTML} = TE.SourceHTML;
    |
    | Object.assign(map.commands, commandsSourceHTML);
    |
    | map.keys['Control-b'] = 'bold';
    | map.keys['Control-e'] = 'code';
    | map.keys['Control-h'] = 'blocks';
    | map.keys['Control-i'] = 'italic';
    | map.keys['Control-k'] = 'link';
    | map.keys['Control-o'] = 'image';
    | map.keys['Control-q'] = 'quote';
    | map.keys['Control-u'] = 'underline';
    |
    | editor.state = Object.assign({}, editor.state, TE.Source.state, TE.SourceXML.state, TE.SourceHTML.state);
    | editor.state.source = Object.assign({}, editor.state.source, TE.Source.state.source, TE.SourceXML.state.source, TE.SourceHTML.state.source, {
    |     commands: map.commands,
    |     keys: map.keys
    | });
    |
    | function onBlur() {
    |     map.pull(); // Reset all!
    | }
    |
    | function onInput() {
    |     map.pull(); // Reset all!
    | }
    |
    | function onKeyDown(e) {
    |     map.push(e.key);
    |     let command = map.test();
    |     // Check for custom command…
    |     if (command) {
    |         let value = map.fire(command);
    |         if (false === value) {
    |             e.preventDefault();
    |         } else if (null === value) {
    |             console.error('Unknown command:', command);
    |         }
    |     // Else, run the defaults!
    |     } else {
    |         canKeyDownSourceHTML(map, editor) &&
    |         canKeyDownSourceXML(map, editor) &&
    |         canKeyDownSource(map, editor) &&
    |         canKeyDownDentSource(map, editor) &&
    |         canKeyDownEnterSource(map, editor) &&
    |         canKeyDownHistorySource(map, editor) &&
    |         canKeyDownMoveSource(map, editor) ||
    |         e.preventDefault();
    |     }
    |     log.textContent = map + "";
    | }
    |
    | function onKeyUp(e) {
    |     canKeyUpSource(map, editor) || e.preventDefault();
    |     map.pull(e.key);
    |     log.textContent = map + "";
    | }
    |
    | function onMouseDown(e) {
    |     canMouseDownSourceXML(map, editor) || e.preventDefault();
    | }
    |
    | function letEditor() {
    |     editor.self.classList.remove('source');
    |     editor.self.parentNode.nextElementSibling.style.display = 'none';
    |     editor.self.removeEventListener('blur', onBlur);
    |     editor.self.removeEventListener('input', onInput);
    |     editor.self.removeEventListener('keydown', onKeyDown);
    |     editor.self.removeEventListener('keyup', onKeyUp);
    |     editor.self.removeEventListener('mousedown', onMouseDown);
    |     editor.self.removeEventListener('touchstart', onMouseDown);
    |     editor.loss(true); // Remove all history data!
    |     return editor;
    | }
    |
    | function setEditor() {
    |     editor.self.classList.add('source');
    |     editor.self.parentNode.nextElementSibling.style.display = "";
    |     editor.self.addEventListener('blur', onBlur, false);
    |     editor.self.addEventListener('input', onInput, false);
    |     editor.self.addEventListener('keydown', onKeyDown, false);
    |     editor.self.addEventListener('keyup', onKeyUp, false);
    |     editor.self.addEventListener('mousedown', onMouseDown, false);
    |     editor.self.addEventListener('touchstart', onMouseDown, false);
    |     editor.record(); // Record the first history data!
    |     return editor;
    | }
    |
    | setEditor();

block style
  style
    | * {
    |   box-sizing: border-box;
    | }
    | :root {
    |   background: #fff;
    |   border-top: 4px solid;
    |   color: #000;
    |   font: normal normal 16px/1.25 serif;
    |   position: relative;
    | }
    | a {
    |   color: #009;
    |   text-decoration: none;
    | }
    | a, code {
    |   word-wrap: break-word;
    | }
    | code {
    |   font-family: monospace;
    |   font-size: 80%;
    | }
    | footer, header, main, nav {
    |   margin: 0 auto;
    |   max-width: 700px;
    | }
    | hr {
    |   border: 0;
    |   border-top: 1px dashed;
    |   color: inherit;
    |   height: 0;
    | }
    | mark {
    |   background: #ff0;
    |   border: 1px solid #f00;
    |   display: inline-block;
    |   height: 1.25em;
    |   min-width: 3px;
    |   vertical-align: middle;
    | }
    | pre {
    |   white-space: pre-wrap;
    |   word-wrap: break-word;
    | }
    | pre code {
    |   background: #eee;
    |   display: block;
    |   padding: 1em;
    | }
    | table {
    |   width: 100%;
    | }
    | td, th {
    |   text-align: left;
    |   vertical-align: top;
    | }
    | textarea {
    |   display: block;
    |   height: 20em;
    |   width: 100%;
    | }
    | .source {
    |   background: #ccc;
    |   border: 1px solid #000;
    |   color: #000;
    |   padding: 2px;
    | }

block content
  header
    h1= title
    p HTML source code editor extension for #[a(href='../text-editor/index.html') text editor].
    hr
    p Provides a set of key strokes to generate responses like in a typical #[abbr(title='Hyper Text Markup Language') HTML] source code editor.
  main
    p(tabindex='0') Previous tabbable element.
    p: textarea(placeholder!='Code goes here&hellip;' spellcheck='false')
    p
      button(onclick='map.commands.bold.call(editor);') Bold
      = ' '
      button(onclick='map.commands.italic.call(editor);') Italic
      = ' '
      button(onclick='map.commands.underline.call(editor);') Underline
      = ' '
      button(onclick='map.commands.blocks.call(editor);') Blocks
      = ' '
      button(onclick='map.commands.quote.call(editor);') Quote
      = ' '
      button(onclick='map.commands.code.call(editor);') Code
      = ' '
      button(onclick='map.commands.link.call(editor);') Link
      = ' '
      button(onclick='map.commands.image.call(editor);') Image
      = ' '
      button(onclick='editor.undo();') Undo
      = ' '
      button(onclick='editor.redo();') Redo
      = ' '
      code#log
    p
      label
        input(checked onchange='this.checked ? setEditor() : letEditor();' type='checkbox')
        = ' '
        span Enable HTML Source Editor
    h2 Features
    ul
      li <code>&lt;h1&gt;asdf<mark></mark>&lt;/h1&gt;</code> then press <kbd>↵</kbd>.
      li <code>&lt;h2&gt;asdf<mark></mark>&lt;/h2&gt;</code> then press <kbd>↵</kbd>.
      li <code>&lt;h3&gt;asdf<mark></mark>&lt;/h3&gt;</code> then press <kbd>↵</kbd>.
      li <code>&lt;h4&gt;asdf<mark></mark>&lt;/h4&gt;</code> then press <kbd>↵</kbd>.
      li <code>&lt;h5&gt;asdf<mark></mark>&lt;/h5&gt;</code> then press <kbd>↵</kbd>.
      li <code>&lt;h6&gt;asdf<mark></mark>&lt;/h6&gt;</code> then press <kbd>↵</kbd>.
      li <code>&lt;li class="foo"&gt;asdf<mark></mark>&lt;/li&gt;</code> then press <kbd>↵</kbd>.
      li <code>&lt;li&gt;asdf<mark></mark>&lt;/li&gt;</code> then press <kbd>↵</kbd>.
      li <code>&lt;p class="foo"&gt;asdf<mark></mark>&lt;/p&gt;</code> then press <kbd>↵</kbd>.
      li <code>&lt;p&gt;asdf<mark></mark>&lt;/p&gt;</code> then press <kbd>↵</kbd>.
      li Press <kbd>⎈</kbd><kbd>b</kbd>.
      li Press <kbd>⎈</kbd><kbd>e</kbd>.
      li Press <kbd>⎈</kbd><kbd>h</kbd>.
      li Press <kbd>⎈</kbd><kbd>i</kbd>.
      li Press <kbd>⎈</kbd><kbd>k</kbd>.
      li Press <kbd>⎈</kbd><kbd>o</kbd>.
      li Press <kbd>⎈</kbd><kbd>q</kbd>.
      li Press <kbd>⎈</kbd><kbd>u</kbd>.
    h2 Usage
    h4 Browser
    pre: code
      | &lt;script src="#[a(href='../text-editor/index.min.js' target='_blank') ./text-editor/index.min.js]"&gt;&lt;/script&gt;
      | &lt;script src="#[a(href='../text-editor.history/index.min.js' target='_blank') ./text-editor.history/index.min.js]"&gt;&lt;/script&gt;
      | &lt;script src="#[a(href='../text-editor.source/index.min.js' target='_blank') ./text-editor.source/index.min.js]"&gt;&lt;/script&gt;
      | &lt;script src="#[a(href='../text-editor.source-x-m-l/index.min.js' target='_blank') ./text-editor.source-x-m-l/index.min.js]"&gt;&lt;/script&gt;
      | &lt;script src="#[a(href='index.min.js' target='_blank') ./text-editor.source-h-t-m-l/index.min.js]"&gt;&lt;/script&gt;
      | &lt;script&gt;
      |
      |   Object.assign(TE.prototype, TE.History.that, TE.Source.that);
      |
      |   TE.prototype.insertXML = TE.SourceXML.that.insert;
      |   TE.prototype.toggleXML = TE.SourceXML.that.toggle;
      |   TE.prototype.wrapXML = TE.SourceXML.that.wrap;
      |
      |   const editor = new TE(document.querySelector('textarea'));
      |   const map = new K(editor);
      |
      |   Object.assign(map.commands, TE.SourceHTML.commands);
      |
      |   map.keys['Control-b'] = 'bold';
      |   map.keys['Control-e'] = 'code';
      |   map.keys['Control-h'] = 'blocks';
      |   map.keys['Control-i'] = 'italic';
      |   map.keys['Control-k'] = 'link';
      |   map.keys['Control-o'] = 'image';
      |   map.keys['Control-q'] = 'quote';
      |   map.keys['Control-u'] = 'underline';
      |
      |   const {
      |       canKeyDown: canKeyDownSource,
      |       canKeyDownEnter: canKeyDownEnterSource,
      |       canKeyDownHistory: canKeyDownHistorySource,
      |       canKeyDownMove: canKeyDownMoveSource,
      |       canKeyDownTab: canKeyDownTabSource,
      |       canKeyUp: canKeyUpSource
      |   } = TE.Source;
      |
      |   const {
      |       canKeyDown: canKeyDownSourceXML
      |   } = TE.SourceXML;
      |
      |   const {
      |       canKeyDown: canKeyDownSourceHTML
      |   } = TE.SourceHTML;
      |
      |   function fromStates(...lot) { #[a(href='https://github.com/taufik-nurrohman/from' target='_blank') &hellip;] }
      |
      |   editor.state = fromStates({}, editor.state, TE.Source.state, TE.SourceXML.state, TE.SourceHTML.state, {
      |       commands: map.commands,
      |       keys: map.keys
      |   });
      |
      |   editor.self.addEventListener('blur', () => map.pull());
      |   editor.self.addEventListener('input', () => map.pull());
      |
      |   editor.self.addEventListener('keydown', e =&gt; {
      |       map.push(e.key);
      |       let command = map.test();
      |       // Check for custom command…
      |       if (command) {
      |           let value = map.fire(command);
      |           if (false === value) {
      |               e.preventDefault();
      |           } else if (null === value) {
      |               console.error('Unknown command:', command);
      |           }
      |       // Else, run the defaults!
      |       } else {
      |           if (
      |               canKeyDownSourceHTML(map, editor) &amp;&amp;
      |               canKeyDownSourceXML(map, editor) &amp;&amp;
      |               canKeyDownSource(map, editor) &amp;&amp;
      |               canKeyDownEnterSource(map, editor) &amp;&amp;
      |               canKeyDownHistorySource(map, editor) &amp;&amp;
      |               canKeyDownMoveSource(map, editor) &amp;&amp;
      |               canKeyDownTabSource(map, editor)
      |           ) {
      |               // Normal key strokes. Add more key strokes extension here!
      |           } else {
      |               e.preventDefault();
      |           }
      |       }
      |   });
      |
      |   editor.self.addEventListener('keyup', e =&gt; {
      |       canKeyUpSource(map, editor) || e.preventDefault();
      |       map.pull(e.key);
      |   });
      |
      |   editor.self.addEventListener('mousedown', e =&gt; {
      |       canMouseDownSourceXML(map, editor) || e.preventDefault();
      |   });
      |
      |   editor.record(); // Record the first history data!
      |
      | &lt;/script&gt;
    h4 CommonJS
    pre: code
      | const {fromStates} = require('@taufik-nurrohman/from');
      | const K = require('@taufik-nurrohman/key');
      | const TE = require('@taufik-nurrohman/text-editor');
      | const {that: thatHistory} = require('@taufik-nurrohman/text-editor.history');
      |
      | const {
      |     canKeyDown: canKeyDownSource,
      |     canKeyDownEnter: canKeyDownEnterSource,
      |     canKeyDownHistory: canKeyDownHistorySource,
      |     canKeyDownMove: canKeyDownMoveSource,
      |     canKeyDownTab: canKeyDownTabSource,
      |     canKeyUp: canKeyUpSource,
      |     state: stateSource,
      |     that: thatSource
      | } = require('@taufik-nurrohman/text-editor.source');
      |
      | const {
      |     canKeyDown: canKeyDownSourceXML,
      |     canMouseDown: canMouseDownSourceXML,
      |     state: stateSourceXML,
      |     that: thatSourceXML
      | } = require('@taufik-nurrohman/text-editor.source-x-m-l');
      |
      | const {
      |     canKeyDown: canKeyDownSourceHTML,
      |     commands: commandsSourceHTML,
      |     state: stateSourceHTML
      | } = require('@taufik-nurrohman/text-editor.source-h-t-m-l');
      |
      | Object.assign(TE.prototype, thatHistory, thatSource);
      |
      | TE.prototype.insertXML = thatSourceXML.insert;
      | TE.prototype.toggleXML = thatSourceXML.toggle;
      | TE.prototype.wrapXML = thatSourceXML.wrap;
      |
      | const editor = new TE(document.querySelector('textarea'));
      | const map = new K(editor);
      |
      | Object.assign(map.commands, commandsSourceHTML);
      |
      | map.keys['Control-b'] = 'bold';
      | map.keys['Control-e'] = 'code';
      | map.keys['Control-h'] = 'blocks';
      | map.keys['Control-i'] = 'italic';
      | map.keys['Control-k'] = 'link';
      | map.keys['Control-o'] = 'image';
      | map.keys['Control-q'] = 'quote';
      | map.keys['Control-u'] = 'underline';
      |
      | editor.state = fromStates({}, editor.state, stateSource, stateSourceXML, stateSourceHTML, {
      |     commands: map.commands,
      |     keys: map.keys
      | });
      |
      | editor.self.addEventListener('blur', () => map.pull());
      | editor.self.addEventListener('input', () => map.pull());
      |
      | editor.self.addEventListener('keydown', e =&gt; {
      |     map.push(e.key);
      |     let command = map.test();
      |     // Check for custom command…
      |     if (command) {
      |         let value = map.fire(command);
      |         if (false === value) {
      |             e.preventDefault();
      |         } else if (null === value) {
      |             console.error('Unknown command:', command);
      |         }
      |     // Else, run the defaults!
      |     } else {
      |         if (
      |             canKeyDownSourceHTML(map, editor) &amp;&amp;
      |             canKeyDownSourceXML(map, editor) &amp;&amp;
      |             canKeyDownSource(map, editor) &amp;&amp;
      |             canKeyDownEnterSource(map, editor) &amp;&amp;
      |             canKeyDownHistorySource(map, editor) &amp;&amp;
      |             canKeyDownMoveSource(map, editor) &amp;&amp;
      |             canKeyDownTabSource(map, editor)
      |         ) {
      |             // Normal key strokes. Add more key strokes extension here!
      |         } else {
      |             e.preventDefault();
      |         }
      |     }
      | });
      |
      | editor.self.addEventListener('keyup', e =&gt; {
      |     canKeyUpSource(map, editor) || e.preventDefault();
      |     map.pull(e.key);
      | });
      |
      | editor.self.addEventListener('mousedown', e =&gt; {
      |     canMouseDownSourceXML(map, editor) || e.preventDefault();
      | });
      |
      | editor.record(); // Record the first history data!
    h4 ECMAScript
    pre: code
      | import {fromStates} from '@taufik-nurrohman/from';
      | import K from '@taufik-nurrohman/key';
      | import TE from '@taufik-nurrohman/text-editor';
      | import {that as thatHistory} from '@taufik-nurrohman/text-editor.history';
      |
      | import {
      |     canKeyDown as canKeyDownSource,
      |     canKeyDownEnter as canKeyDownEnterSource,
      |     canKeyDownHistory as canKeyDownHistorySource,
      |     canKeyDownMove as canKeyDownMoveSource,
      |     canKeyDownTab as canKeyDownTabSource,
      |     canKeyUp as canKeyUpSource,
      |     state as stateSource,
      |     that as thatSource
      | } from '@taufik-nurrohman/text-editor.source';
      |
      | import {
      |     canKeyDown as canKeyDownSourceXML,
      |     canMouseDown as canMouseDownSourceXML,
      |     state as stateSourceXML,
      |     that as thatSourceXML
      | } from '@taufik-nurrohman/text-editor.source-x-m-l';
      |
      | import {
      |     canKeyDown as canKeyDownSourceHTML,
      |     commands as commandsSourceHTML,
      |     state as stateSourceHTML
      | } from '@taufik-nurrohman/text-editor.source-h-t-m-l';
      |
      | Object.assign(TE.prototype, thatHistory, thatSource);
      |
      | TE.prototype.insertXML = thatSourceXML.insert;
      | TE.prototype.toggleXML = thatSourceXML.toggle;
      | TE.prototype.wrapXML = thatSourceXML.wrap;
      |
      | const editor = new TE(document.querySelector('textarea'));
      | const map = new K(editor);
      |
      | Object.assign(map.commands, commandsSourceHTML);
      |
      | map.keys['Control-b'] = 'bold';
      | map.keys['Control-e'] = 'code';
      | map.keys['Control-h'] = 'blocks';
      | map.keys['Control-i'] = 'italic';
      | map.keys['Control-k'] = 'link';
      | map.keys['Control-o'] = 'image';
      | map.keys['Control-q'] = 'quote';
      | map.keys['Control-u'] = 'underline';
      |
      | editor.state = fromStates({}, editor.state, stateSource, stateSourceXML, stateSourceHTML, {
      |     commands: map.commands,
      |     keys: map.keys
      | });
      |
      | editor.self.addEventListener('blur', () => map.pull());
      | editor.self.addEventListener('input', () => map.pull());
      |
      | editor.self.addEventListener('keydown', e =&gt; {
      |     map.push(e.key);
      |     let command = map.test();
      |     // Check for custom command…
      |     if (command) {
      |         let value = map.fire(command);
      |         if (false === value) {
      |             e.preventDefault();
      |         } else if (null === value) {
      |             console.error('Unknown command:', command);
      |         }
      |     // Else, run the defaults!
      |     } else {
      |         if (
      |             canKeyDownSourceHTML(map, editor) &amp;&amp;
      |             canKeyDownSourceXML(map, editor) &amp;&amp;
      |             canKeyDownSource(map, editor) &amp;&amp;
      |             canKeyDownEnterSource(map, editor) &amp;&amp;
      |             canKeyDownHistorySource(map, editor) &amp;&amp;
      |             canKeyDownMoveSource(map, editor) &amp;&amp;
      |             canKeyDownTabSource(map, editor)
      |         ) {
      |             // Normal key strokes. Add more key strokes extension here!
      |         } else {
      |             e.preventDefault();
      |         }
      |     }
      | });
      |
      | editor.self.addEventListener('keyup', e =&gt; {
      |     canKeyUpSource(map, editor) || e.preventDefault();
      |     map.pull(e.key);
      | });
      |
      | editor.self.addEventListener('mousedown', e =&gt; {
      |     canMouseDownSourceXML(map, editor) || e.preventDefault();
      | });
      |
      | editor.record(); // Record the first history data!
    h3 Properties
    h4 TE.SourceHTML.commands
    p Return the default commands to be merged with #[code editor.state.source.commands].
    h4 TE.SourceHTML.state
    p Return the default state to be merged with #[code editor.state].
    h3 Strokes
    p Strokes can either return #[code false] or #[code true]. If it returns #[code false], it means that this extension has manipulated the existing value. If it returns #[code true], it means that current stroke works normally.
    h4 TE.SourceHTML.canKeyDown(map, that)
  footer
    hr
    p
      != '&copy; ' + year + ' '
      a(href='/') Taufik Nurrohman