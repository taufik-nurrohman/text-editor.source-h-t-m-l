extends _index.pug

block state
  - const scripts = ['../key/index.min.js', '../text-editor/index.min.js', '../text-editor.history/index.min.js', '../text-editor.key/index.min.js', '../text-editor.source/index.min.js', '../text-editor.source-x-m-l/index.min.js', 'index.min.js']
  - const styles = ['../layout/index.min.css']
  - const theme = '#000'
  - const title = 'Text Editor Source HTML ' + version

block script
  script
    | const editor = new TextEditor(document.querySelector('textarea'), {
    |     commands: {
    |         pull: function () {
    |             return this.pull().record(), false;
    |         },
    |         push: function () {
    |             return this.push().record(), false;
    |         },
    |         redo: function () {
    |             return this.redo(), false;
    |         },
    |         undo: function () {
    |             return this.undo(), false;
    |         }
    |     },
    |     keys: {
    |         'Control-[': 'pull',
    |         'Control-]': 'push',
    |         'Control-y': 'redo',
    |         'Control-z': 'undo'
    |     },
    |     source: {
    |         type: 'HTML'
    |     },
    |     tab: 2,
    |     with: [TextEditor.History, TextEditor.Key, TextEditor.SourceHTML, TextEditor.SourceXML, TextEditor.Source]
    | });

block style
  style
    | mark {
    |   border-left: 1px solid #f00;
    |   border-right: 1px solid #f00;
    | }
    |
    | mark:empty {
    |   border-right-width: 0;
    | }

block content
  header
    h1
      a(href='../text-editor/index.html') &laquo;
      = ' ' + title
    p #[abbr(title='Hyper Text Markup Language') HTML] source extension for #[a(href='../text-editor/index.html') Text Editor]. This extension provides a set of key strokes to generate responses like in a typical #[abbr(title='Hyper Text Markup Language') HTML] source code editor.
    hr
  main
    p
      label
        input(checked onchange='return editor[this.checked ? \'attach\' : \'detach\'](), false;' type='checkbox')
        = ' '
        span Enable #[abbr(title='Hyper Text Markup Language') HTML] Source Editor
    p
      textarea(placeholder!='Code goes here&hellip;' spellcheck='false' style={
        'display': 'block',
        'width': '100%'
      })
    p(role='group')
      button(onclick='return editor.insertLink(), false;') Insert Link
      = ' '
      button(onclick='return editor.insertImage(), false;') Insert Image
    h2 Strokes
    ul
      li <code>&lt;h1&gt;asdf<mark></mark>&lt;/h1&gt;</code> then press <kbd>Enter</kbd>.
      li <code>&lt;h2&gt;asdf<mark></mark>&lt;/h2&gt;</code> then press <kbd>Enter</kbd>.
      li <code>&lt;h3&gt;asdf<mark></mark>&lt;/h3&gt;</code> then press <kbd>Enter</kbd>.
      li <code>&lt;h4&gt;asdf<mark></mark>&lt;/h4&gt;</code> then press <kbd>Enter</kbd>.
      li <code>&lt;h5&gt;asdf<mark></mark>&lt;/h5&gt;</code> then press <kbd>Enter</kbd>.
      li <code>&lt;h6&gt;asdf<mark></mark>&lt;/h6&gt;</code> then press <kbd>Enter</kbd>.
      li <code>&lt;li&gt;asdf<mark></mark>&lt;/li&gt;</code> then press <kbd>Enter</kbd>.
      li <code>&lt;p&gt;asdf<mark></mark>&lt;/p&gt;</code> then press <kbd>Enter</kbd>.
      li Press <kbd>Control</kbd> + <kbd>'</kbd> or <kbd>Control</kbd> + <kbd>Shift</kbd> + <kbd>"</kbd>.
      li Press <kbd>Control</kbd> + <kbd>Enter</kbd> to escape from the current line then start a paragraph below it.
      li Press <kbd>Control</kbd> + <kbd>Shift</kbd> + <kbd>Enter</kbd> to escape from the current line then start a paragraph above it.
      li Press <kbd>Control</kbd> + <kbd>b</kbd>.
      li Press <kbd>Control</kbd> + <kbd>e</kbd>.
      li Press <kbd>Control</kbd> + <kbd>h</kbd>.
      li Press <kbd>Control</kbd> + <kbd>i</kbd>.
      li Press <kbd>Control</kbd> + <kbd>l</kbd>.
      li Press <kbd>Control</kbd> + <kbd>o</kbd>.
      li Press <kbd>Control</kbd> + <kbd>u</kbd>.
      li Press <kbd>Shift</kbd> + <kbd>Enter</kbd> to insert a hard break.
    h2 Usage
    h4 Browser
    pre: code
      | &lt;script src="#[a(href='../text-editor/index.min.js' target='_blank') ./text-editor/index.min.js]"&gt;&lt;/script&gt;
      | &lt;script src="#[a(href='../text-editor.history/index.min.js' target='_blank') ./text-editor.history/index.min.js]"&gt;&lt;/script&gt;
      | &lt;script src="#[a(href='../text-editor.key/index.min.js' target='_blank') ./text-editor.key/index.min.js]"&gt;&lt;/script&gt;
      | &lt;script src="#[a(href='../text-editor.source/index.min.js' target='_blank') ./text-editor.source/index.min.js]"&gt;&lt;/script&gt;
      | &lt;script src="#[a(href='../text-editor.source-x-m-l/index.min.js' target='_blank') ./text-editor.source-x-m-l/index.min.js]"&gt;&lt;/script&gt;
      | &lt;script src="#[a(href='index.min.js' target='_blank') ./text-editor.source-h-t-m-l/index.min.js]"&gt;&lt;/script&gt;
      | &lt;script&gt;
      |
      |   const editor = new TextEditor(document.querySelector('textarea'), {
      |       commands: {
      |           blocks: function () {
      |               return this.toggleElements([
      |                   ['h1'],
      |                   ['h2'],
      |                   ['h3'],
      |                   ['h4'],
      |                   ['h5'],
      |                   ['h6'],
      |                   ['p'],
      |               ]).record(), false;
      |           },
      |           bold: function () {
      |               return this.toggleElement(['strong']).record(), false;
      |           },
      |           code: function () {},
      |           image: function (hint, value) {
      |               return this.insertImage(hint, value, function () {
      |                   this.record();
      |               }), false;
      |           }
      |           italic: function () {
      |               return this.toggleElement(['em']).record(), false;
      |           },
      |           link: function (hint, value) {
      |               return this.insertLink(hint, value, function () {
      |                   this.record();
      |               }), false;
      |           },
      |           pull: function () {
      |               return this.pull().record(), false;
      |           },
      |           push: function () {
      |               return this.push().record(), false;
      |           },
      |           quote: function () {
      |               return this.toggleElements([
      |                   ['blockquote'],
      |                   ['q']
      |               ]).record(), false;
      |           },
      |           redo: function () {
      |               return this.redo(), false;
      |           },
      |           underline: function () {
      |               return this.toggleElement(['u']).record(), false;
      |           },
      |           undo: function () {
      |               return this.undo(), false;
      |           }
      |       },
      |       keys: {
      |           'Control-[': 'pull',
      |           'Control-]': 'push',
      |           'Control-y': 'redo',
      |           'Control-z': 'undo'
      |       },
      |       source: {
      |           type: 'HTML' // Set the current editor type as `HTML`
      |       },
      |       tab: 2,
      |       // Be sure to put `TextEditor.SourceHTML` before `TextEditor.SourceXML`
      |       with: [TextEditor.History, TextEditor.Key, TextEditor.SourceHTML, TextEditor.SourceXML, TextEditor.Source]
      |   });
      |
      | &lt;/script&gt;
    h4 CommonJS
    pre: code
    h4 ECMAScript
    pre: code
    h2 Methods
    h3 Instance Methods
    h4: code editor.insertImage(hint, value, then)
    p Insert an image from URL.
    pre: code
      | editor.insertImage('URL:', 'http://', function (value) {
      |     console.log(value);
      | });
    h4: code editor.insertLink(hint, value, then)
    p Insert a link from URL.
    pre: code
      | editor.insertLink('URL:', 'http://', function (value) {
      |     console.log(value);
      | });
    h4: code editor.toggleElementBlock(open, close, wrap)
    h4: code editor.toggleElementBlock(of, wrap)
    h4: code editor.toggleElements(of, wrap)
    p Toggle elements in the list.
  footer
    hr
    p
      != '&copy; ' + year + ' '
      a(href='/') Taufik Nurrohman